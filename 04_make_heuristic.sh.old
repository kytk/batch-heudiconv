#!/bin/bash
# Interactive script to create heuristic.py for BIDS conversion
# K.Nemoto 13 Dec 2024

set -x

usage() {
    echo "Create heuristic.py interactively"
    echo "Usage: $0 <setname>"
    echo
    echo "This script will:"
    echo "1. Analyze your DICOM directory structure"
    echo "2. Help identify sequence types"
    echo "3. Generate a heuristic.py file"
    exit 1
}

if [[ $# -lt 1 ]]; then
    usage
fi

setname=${1%/}

# Check prerequisites
if [[ ! -d $setname/DICOM/sorted ]]; then
    echo "Error: Sorted DICOM directory not found"
    echo "Please run 02_sort_dicom.sh first"
    exit 1
fi

# Create temporary files
mkdir -p $setname/tmp
series_list=$setname/tmp/series_list.txt
template_file=$setname/code/heuristic_${setname}.py

# Function to detect sequence type based on directory name and DICOM header
detect_sequence_type() {
    local dirname=$1
    local dim4=${2:-1}
    
    case $dirname in
        # T1w patterns
        *"MPRAGE"*|*"T1W"*|*"T1_"*|*"3D_T1"*|*"T1-weighted"*|*"Sag"*|*"SAG"*)
            echo "T1w"
            ;;
        
        # T2w patterns
        *"T2W"*|*"T2_"*|*"T2-weighted"*|*"FLAIR"*|*"SPC_T2"*)
            echo "T2w"
            ;;
        
        # Resting-state fMRI patterns
        *"REST"*|*"rest"*|*"Resting"*|*"resting"*|*"RS"*|*"RS_MB"*|*"Resting_State_fMRI"*)
            if [[ $dim4 -gt 100 ]]; then
                echo "func_rest"
            else
                echo "unknown"
            fi
            ;;
        
        # DWI patterns
        *"DWI"*|*"DTI"*|*"DIFF"*|*"diff"*|*"ep2d_diff"*|*"DTI_30"*|*"DTI_b"*)
            if [[ $dim4 -gt 5 ]]; then
                echo "dwi"
            else
                echo "unknown"
            fi
            ;;
        
        # Fieldmap patterns - Siemens style
        *"FIELD"*|*"field"*|*"Field_map"*|*"fieldmap"*|*"field_mapping"*)
            if [[ $dirname == *"mapping"* ]]; then
                echo "fieldmap_siemens"
            else
                echo "fieldmap_ge"
            fi
            ;;
        
        # Phase encoding direction patterns
        *"_AP"*|*"_PA"*|*"_LR"*|*"_RL"*)
            if [[ $dirname == *"REST"* || $dirname == *"rest"* || $dirname == *"RS"* ]]; then
                echo "func_rest_dir"
            elif [[ $dirname == *"DWI"* || $dirname == *"DTI"* || $dirname == *"diff"* ]]; then
                echo "dwi_dir"
            else
                echo "unknown"
            fi
            ;;
        
        # GE specific patterns
        *"BRAVO"*|*"IR-FSPGR"*)
            echo "T1w"
            ;;
        *"CUBE"*)
            echo "T2w"
            ;;
        
        *)
            echo "unknown"
            ;;
    esac
}

# List all unique series directories
echo "Analyzing DICOM directory structure..."
find "$setname/DICOM/sorted" -mindepth 2 -maxdepth 2 -type d | \
    while read -r dir; do
        series_name=$(basename "$dir")
        # Get dim4 from example DICOM if possible
        dim4=1
        if command -v dcmdump >/dev/null 2>&1; then
            example_dcm=$(find "$dir" -type f -name "*.dcm" -o -name "*.IMA" | head -n 1)
            if [[ -n "$example_dcm" ]]; then
                dim4=$(dcmdump "$example_dcm" 2>/dev/null | grep NumberOfTemporalPositions || echo "1")
            fi
        fi
        sequence_type=$(detect_sequence_type "$series_name" "$dim4")
        echo "$series_name|$sequence_type|$dim4" >> "$series_list"
    done

# Generate heuristic.py
echo "Generating heuristic.py..."
cat > "$template_file" << 'EOF'
# heuristic.py for ${setname}
# Generated by 05_make_heuristic.sh
# $(date +%Y-%m-%d)

import os

def create_key(template, outtype=('nii.gz',), annotation_classes=None):
    if template is None or not template:
        raise ValueError('Template must be a valid format string')
    return template, outtype, annotation_classes

def infotodict(seqinfo):
    """Heuristic evaluator for determining which runs belong where"""
EOF

# Add keys based on detected sequence types
echo "Adding sequence definitions..."
{
    while IFS='|' read -r dirname seqtype dim4; do
        case $seqtype in
            "T1w")
                echo "    # T1w"
                echo "    t1w = create_key('sub-{subject}/{session}/anat/sub-{subject}_{session}_run-{item:02d}_T1w')"
                ;;
            "T2w")
                echo "    # T2w"
                echo "    t2w = create_key('sub-{subject}/{session}/anat/sub-{subject}_{session}_run-{item:02d}_T2w')"
                ;;
            "func_rest")
                echo "    # Resting-state fMRI"
                echo "    func_rest = create_key('sub-{subject}/{session}/func/sub-{subject}_{session}_task-rest_run-{item:02d}_bold')"
                ;;
            "dwi")
                echo "    # DWI"
                echo "    dwi = create_key('sub-{subject}/{session}/dwi/sub-{subject}_{session}_run-{item:02d}_dwi')"
                ;;
            "fieldmap")
                echo "    # Fieldmap"
                echo "    fmap_mag = create_key('sub-{subject}/{session}/fmap/sub-{subject}_{session}_magnitude')"
                echo "    fmap_phase = create_key('sub-{subject}/{session}/fmap/sub-{subject}_{session}_phasediff')"
                ;;
        esac
    done < "$series_list"
} >> "$template_file"

# Add info dictionary initialization
echo "Adding sequence matching rules..."
{
    echo
    echo "    info = {"
    while IFS='|' read -r dirname seqtype dim4; do
        if [[ "$seqtype" != "unknown" ]]; then
            case $seqtype in
                "fieldmap")
                    echo "        fmap_mag: [], fmap_phase: [],"
                    ;;
                *)
                    echo "        ${seqtype}: [],"
                    ;;
            esac
        fi
    done
    echo "    }"
    
    echo
    echo "    for idx, s in enumerate(seqinfo):"
    echo "        \"\"\""
    echo "        The namedtuple 's' contains the following fields:"
    echo "        * total_files_till_now"
    echo "        * example_dcm_file"
    echo "        * series_id"
    echo "        * dcm_dir_name"
    echo "        * dim1, dim2, dim3, dim4"
    echo "        * TR, TE"
    echo "        * protocol_name"
    echo "        * series_description"
    echo "        * image_type"
    echo "        \"\"\""
    echo

    while IFS='|' read -r dirname seqtype dim4; do
        if [[ "$seqtype" != "unknown" ]]; then
            case $seqtype in
                "fieldmap")
                    echo "        # Fieldmap"
                    echo "        if '${dirname}' in s.dcm_dir_name and 'M' in s.image_type:"
                    echo "            info[fmap_mag].append(s.series_id)"
                    echo "        if '${dirname}' in s.dcm_dir_name and 'P' in s.image_type:"
                    echo "            info[fmap_phase].append(s.series_id)"
                    ;;
                "func_rest")
                    echo "        # Resting-state fMRI"
                    echo "        if '${dirname}' in s.dcm_dir_name and s.dim4 >= 100:"
                    echo "            info[func_rest].append(s.series_id)"
                    ;;
                "dwi")
                    echo "        # DWI"
                    echo "        if '${dirname}' in s.dcm_dir_name:"
                    echo "            info[dwi].append(s.series_id)"
                    ;;
                *)
                    echo "        # ${seqtype}"
                    echo "        if '${dirname}' in s.dcm_dir_name:"
                    echo "            info[${seqtype}].append(s.series_id)"
                    ;;
            esac
        fi
    done < "$series_list"
} >> "$template_file"

# Add return statement and IntendedFor
cat >> "$template_file" << 'EOF'

    return info

# IntendedFor
POPULATE_INTENDED_FOR_OPTS = {
    'matching_parameters': ['ImagingVolume', 'Shims'],
    'criterion': 'Closest'
}
EOF

echo "Heuristic file created: $template_file"
echo
echo "Please review and edit the file if necessary."
echo "You may need to:"
echo "1. Adjust the sequence matching conditions"
echo "2. Add phase encoding directions if needed"
echo "3. Modify the IntendedFor settings"

# Cleanup
rm "$series_list"

exit 0
